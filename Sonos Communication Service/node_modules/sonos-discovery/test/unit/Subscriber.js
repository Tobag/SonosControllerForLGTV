'use strict';

var expect = require('chai').expect;
var sinon = require('sinon');
var proxyquire = require('proxyquire');
require('chai').use(require('sinon-chai'));
require('sinon-as-promised');

describe('Subscriber', function () {
  var request = void 0;
  var Subscriber = void 0;
  var successfulRequest = void 0;

  beforeEach(function () {
    successfulRequest = { headers: { sid: 1234567 } };
    request = sinon.stub();
    Subscriber = proxyquire('../../lib/Subscriber', {
      './helpers/request': request
    });
  });

  it('Sends a subscription with the correct parameters', function () {
    request.resolves(successfulRequest);
    new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 600);
    expect(request).calledOnce;
    expect(request.firstCall.args[0]).eql({
      uri: 'http://192.168.1.151:1400/test/path',
      method: 'SUBSCRIBE',
      headers: {
        CALLBACK: '<http://127.0.0.2/>',
        NT: 'upnp:event',
        TIMEOUT: 'Second-600'
      },
      stream: true
    });
  });

  it('Resubscribes if failure', function (done) {
    request.rejects('Rejecting subscribe attempt. This is a mocked error');
    request.onCall(2).resolves(successfulRequest);
    var subscriber = new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 600, 100);

    setTimeout(function () {

      expect(request).calledTwice;
      expect(request.secondCall.args[0]).eql({
        uri: 'http://192.168.1.151:1400/test/path',
        method: 'SUBSCRIBE',
        stream: true,
        headers: {
          CALLBACK: '<http://127.0.0.2/>',
          NT: 'upnp:event',
          TIMEOUT: 'Second-600'
        }
      });
      subscriber.dispose();
      done();
    }, 150);
  });

  it('Resubscribes without sid if resubscribe fails', function (done) {
    request.onCall(0).resolves({
      headers: {
        sid: '12345678'
      }
    });
    request.rejects('Rejecting subscribe attempt. This is a mocked error');
    var subscriber = new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 0.1, 100);

    setTimeout(function () {

      expect(request).callCount(3);
      expect(request.secondCall.args[0]).eql({
        uri: 'http://192.168.1.151:1400/test/path',
        method: 'SUBSCRIBE',
        stream: true,
        headers: {
          TIMEOUT: 'Second-0.1',
          SID: '12345678'
        }
      });

      expect(request.thirdCall.args[0]).eql({
        uri: 'http://192.168.1.151:1400/test/path',
        method: 'SUBSCRIBE',
        stream: true,
        headers: {
          CALLBACK: '<http://127.0.0.2/>',
          NT: 'upnp:event',
          TIMEOUT: 'Second-0.1'
        }
      });
      subscriber.dispose();
      done();
    }, 250);
  });

  it('Resubscribes right before timeout', function (done) {
    request.resolves({
      headers: {
        sid: '1234567890'
      }
    });
    var subscriber = new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 0.1);

    setTimeout(function () {
      expect(request).calledTwice;
      expect(request.secondCall.args[0]).eql({
        uri: 'http://192.168.1.151:1400/test/path',
        method: 'SUBSCRIBE',
        stream: true,
        headers: {
          TIMEOUT: 'Second-0.1',
          SID: '1234567890'
        }
      });
      subscriber.dispose();
      done();
    }, 90);
  });

  it('Sends unsubscribe if dispose is called', function (done) {
    request.resolves({
      headers: {
        sid: '1234567890'
      }
    });
    var subscriber = new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 0.1);

    setImmediate(function () {
      subscriber.dispose();
      expect(request).calledTwice;
      expect(request.secondCall.args[0]).eql({
        method: 'UNSUBSCRIBE',
        stream: true,
        uri: 'http://192.168.1.151:1400/test/path',
        headers: {
          SID: '1234567890'
        }
      });
      done();
    });
  });

  it('Stops renewing if dispose is called', function (done) {
    request.resolves({
      headers: {
        sid: '1234567890'
      }
    });
    var subscriber = new Subscriber('http://192.168.1.151:1400/test/path', 'http://127.0.0.2/', 0.1);

    setImmediate(function () {
      subscriber.dispose();
    });

    setTimeout(function () {
      expect(request).calledTwice;
      done();
    }, 90);
  });
});
'use strict';

var expect = require('chai').expect;
var sinon = require('sinon');
var proxyquire = require('proxyquire').noCallThru();
var fs = require('fs');
var soap = require('../../lib/helpers/soap');
var UnknownServiceError = require('../../lib/errors/unknown-service');
require('chai').use(require('sinon-chai'));
require('sinon-as-promised');

describe('SonosSystem', function () {
  var SonosSystem = void 0;
  var ssdp = void 0;
  var sonos = void 0;
  var request = void 0;
  var NotificationListener = void 0;
  var listener = void 0;
  var Subscriber = void 0;
  var Player = void 0;
  var Sub = void 0;

  beforeEach(function () {
    ssdp = {
      start: sinon.spy(),
      stop: sinon.spy(),
      on: sinon.spy()
    };

    request = sinon.stub();
    request.onCall(0).resolves({
      socket: {
        address: function address() {
          return {
            address: '127.0.0.2'
          };
        }
      }
    });

    listener = {
      on: sinon.spy(),
      endpoint: sinon.stub().returns('http://127.0.0.2:3500/')
    };

    NotificationListener = sinon.stub().returns(listener);

    Subscriber = sinon.spy();

    Player = sinon.spy(proxyquire('../../lib/models/Player', {
      '../Subscriber': Subscriber
    }));

    Sub = sinon.spy(proxyquire('../../lib/models/Sub', {
      '../Subscriber': Subscriber
    }));

    sinon.stub(soap, 'invoke').resolves(fs.createReadStream(__dirname + '/../data/listavailableservices.xml'));

    SonosSystem = proxyquire('../../lib/SonosSystem', {
      './sonos-ssdp': ssdp,
      './helpers/request': request,
      './NotificationListener': NotificationListener,
      './Subscriber': Subscriber,
      './models/Player': Player,
      './models/Sub': Sub
    });
  });

  beforeEach(function () {
    sonos = new SonosSystem();
  });

  afterEach(function () {
    soap.invoke.restore();
  });

  it('Loaded prototypes', function () {
    expect(SonosSystem).respondTo('applyPreset');
    expect(SonosSystem).respondTo('getFavorites');
    expect(SonosSystem).respondTo('getPlaylists');
    expect(SonosSystem).respondTo('refreshShareIndex');
  });

  it('Starts scanning', function () {
    expect(ssdp.start).calledOnce;
  });

  describe('when topology is done', function () {

    beforeEach(function (done) {
      ssdp.on.yield({
        ip: '127.0.0.1',
        location: 'http://127.0.0.1:1400/xml',
        household: 'Sonos_1234567890abcdef'
      });

      setImmediate(function () {
        done();
      });
    });

    beforeEach(function () {
      listener.on.withArgs('listening').yield();
    });

    it('Finds local endpoint', function () {
      expect(request).called;
      expect(request.firstCall.args[0].method).equals('GET');
      expect(request.firstCall.args[0].uri).equals('http://127.0.0.1:1400/xml');
      expect(sonos.localEndpoint).equals('127.0.0.2');
    });

    it('Starts a NotificationListener', function () {
      expect(NotificationListener).calledWithNew;
    });

    it('Subscribes to player when ssdp emits', function () {
      expect(Subscriber).calledWithNew;
      expect(Subscriber.firstCall.args).eql(['http://127.0.0.1:1400/ZoneGroupTopology/Event', 'http://127.0.0.2:3500/']);
    });

    describe('topology', function () {

      beforeEach(function () {
        var topology = require('../data/topology.json');
        listener.on.withArgs('topology').yield('', topology);
      });

      it('Populate zones on topology notification', function () {
        expect(sonos.zones).not.empty;
        sonos.zones.forEach(function (zone) {
          expect(zone.members).not.empty;
          zone.members.forEach(function (member) {
            expect(member).instanceOf(Player);
          });
        });

        expect(sonos.zones[0].id).equal('RINCON_00000000000301400:66');
      });

      it('Populate players on topology notification', function () {
        expect(sonos.players).not.empty;
        var player = sonos.getPlayer('TV Room');
        expect(player.roomName).equal('TV Room');
      });

      it('Do not contain Invisible units', function () {
        sonos.zones.forEach(function (zone) {
          return zone.members.forEach(function (member) {
            expect(member.roomName).not.equal('BOOST');
          });
        });
      });

      it('Attaches SUB to primary player', function () {
        sonos.zones.forEach(function (zone) {
          var tvRoom = zone.members.find(function (member) {
            return member.roomName === 'TV Room';
          });
          expect(tvRoom).not.undefined;
          expect(tvRoom.sub).not.undefined;
          expect(tvRoom.sub.roomName).equal('TV Room (SUB)');
        });
      });

      it('Only creates player and sub once', function () {
        var topology = require('../data/topology.json');
        listener.on.withArgs('topology').yield('', topology);
        expect(Player).callCount(5);
        expect(Sub).calledOnce;
      });

      it('Links coordinator property on all players', function () {
        sonos.zones.forEach(function (zone) {
          var coordinatorUuid = zone.uuid;
          zone.members.forEach(function (player) {
            expect(player.coordinator).instanceOf(Player);
            expect(player.coordinator.uuid).equal(coordinatorUuid);
          });
        });
      });

      it('Returns player with getPlayer', function () {
        var player = sonos.getPlayer('Office');
        expect(player).instanceOf(Player);
        expect(player.roomName).equals('Office');
      });

      it('Returns player with getPlayer case insensitive', function () {
        var player = sonos.getPlayer('officE');
        expect(player).instanceOf(Player);
        expect(player.roomName).equals('Office');
      });

      it('Returns player with getPlayerByUUD', function () {
        var player = sonos.getPlayerByUUID('RINCON_20000000000001400');
        expect(player).instanceOf(Player);
        expect(player.roomName).equals('TV Room');
      });

      describe('After initialized', function () {
        beforeEach(function (done) {
          sonos.on('initialized', done);
        });

        it('Called ListAvailableServices with valid player', function () {
          expect(soap.invoke).calledOnce;
          expect(soap.invoke.firstCall.args[0]).equal('http://192.168.1.151:1400/MusicServices/Control');
        });

        it('Can lookup SID from service name', function () {
          expect(sonos.getServiceId('Spotify')).to.equal(9);
          expect(sonos.getServiceId('Apple Music')).to.equal(204);
        });

        it('Can lookup type from service name', function () {
          expect(sonos.getServiceType('Spotify')).to.equal(2311);
          expect(sonos.getServiceType('Apple Music')).to.equal(52231);
        });

        it('Throws error on unknown service', function () {
          expect(sonos.getServiceId.bind(sonos, 'UNKNOWN SERVICE')).to.throw(UnknownServiceError);
          expect(sonos.getServiceType.bind(sonos, 'UNKNOWN SERVICE')).to.throw(UnknownServiceError);
        });
      });
    });
  });
});
'use strict';

var dgram = require('dgram');
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var os = require('os');
var logger = require('./helpers/logger');

function findLocalEndpoints() {
  var interfaces = os.networkInterfaces();
  var endpoints = ['0.0.0.0'];
  for (var name in interfaces) {
    interfaces[name].filter(function (ipInfo) {
      return ipInfo.internal == false && ipInfo.family == 'IPv4';
    }).forEach(function (ipInfo) {
      return endpoints.push(ipInfo.address);
    });
  }

  return endpoints;
}

function SSDP() {
  var SONOS_PLAYER_UPNP_URN = 'urn:schemas-upnp-org:device:ZonePlayer:1';
  var PLAYER_SEARCH = new Buffer(['M-SEARCH * HTTP/1.1', 'HOST: 239.255.255.250:reservedSSDPport', 'MAN: ssdp:discover', 'MX: 1', 'ST: ' + SONOS_PLAYER_UPNP_URN].join('\r\n'));

  var socket = void 0;
  var _this = this;
  var scanTimeout = void 0;
  var socketCycleInterval = void 0;

  var localEndpoints = findLocalEndpoints();
  var endpointIndex = 0;

  function receiveHandler(buffer, rinfo) {

    var response = buffer.toString('ascii');

    if (response.indexOf(SONOS_PLAYER_UPNP_URN) === -1) {
      // Ignore false positive from badly-behaved non-Sonos device.
      return;
    }

    var headerCollection = response.split('\r\n');
    var headers = {};

    for (var i = 0; i < headerCollection.length; i++) {
      var headerRow = headerCollection[i];

      var headerParts = /^([^:]+): (.+)/i.exec(headerRow);

      if (headerParts) {
        headers[headerParts[1]] = headerParts[2];
      }
    }

    if (!headers.LOCATION) return;

    try{
    	var obj = {};
    	obj.household = headers['X-RINCON-HOUSEHOLD'];
    	obj.location = headers.LOCATION;
    	obj.ip = rinfo.address;
    	    
    	_this.emit('found', obj);
    }
    catch(whatever){
    	console.log(whatever);
    }
  }

  function sendScan() {
    logger.trace('sending M-SEARCH...');
    socket.send(PLAYER_SEARCH, 0, PLAYER_SEARCH.length, 1900, '239.255.255.250');
    scanTimeout = setTimeout(sendScan, 1000);
  }

  function start() {
    createSocket(function () {
      sendScan();
    });

    socketCycleInterval = setInterval(function () {
      createSocket();
    }, 5000);
  }

  function createSocket(callback) {
    if (socket) {
      socket.close();
    }

    socket = dgram.createSocket(/*type: */'udp4', /*reuseAddr: true, */receiveHandler);
    var endpoint = localEndpoints[endpointIndex++ % localEndpoints.length];
    socket.bind(1905, endpoint, function () {
      socket.setMulticastTTL(2);
      if (callback instanceof Function) {
        callback();
      }
    });
  }

  function stop() {
    if (!socket) return;
    socket.close();
    socket = null;
    clearInterval(socketCycleInterval);
    clearTimeout(scanTimeout);
  }

  this.start = start;
  this.stop = stop;
}

util.inherits(SSDP, EventEmitter);

module.exports = new SSDP();
'use strict';

var _Object$freeze;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var request = require('./request');
var logger = require('./logger');
var flow = require('xml-flow');
var ArgumentError = require('../errors/argument');

// disable long line check
/* jshint -W101 */
var TYPE = Object.freeze({
  SetEQ: 'urn:schemas-upnp-org:service:RenderingControl:1#SetEQ',
  Play: 'urn:schemas-upnp-org:service:AVTransport:1#Play',
  Pause: 'urn:schemas-upnp-org:service:AVTransport:1#Pause',
  Stop: 'urn:schemas-upnp-org:service:AVTransport:1#Stop',
  Next: 'urn:schemas-upnp-org:service:AVTransport:1#Next',
  Previous: 'urn:schemas-upnp-org:service:AVTransport:1#Previous',
  Mute: 'urn:schemas-upnp-org:service:RenderingControl:1#SetMute',
  GroupMute: 'urn:schemas-upnp-org:service:GroupRenderingControl:1#SetGroupMute',
  Volume: 'urn:schemas-upnp-org:service:RenderingControl:1#SetVolume',
  Seek: 'urn:schemas-upnp-org:service:AVTransport:1#Seek',
  RemoveAllTracksFromQueue: 'urn:schemas-upnp-org:service:AVTransport:1#RemoveAllTracksFromQueue',
  RemoveTrackFromQueue: 'urn:schemas-upnp-org:service:AVTransport:1#RemoveTrackFromQueue',
  RemoveTrackRangeFromQueue: 'urn:schemas-upnp-org:service:AVTransport:1#RemoveTrackRangeFromQueue',
  ReorderTracksInQueue: 'urn:schemas-upnp-org:service:AVTransport:1#ReorderTracksInQueue',
  SaveQueue: 'urn:schemas-upnp-org:service:AVTransport:1#SaveQueue',
  SetPlayMode: 'urn:schemas-upnp-org:service:AVTransport:1#SetPlayMode',
  SetCrossfadeMode: 'urn:schemas-upnp-org:service:AVTransport:1#SetCrossfadeMode',
  GetPositionInfo: 'urn:schemas-upnp-org:service:AVTransport:1#GetPositionInfo',
  ConfigureSleepTimer: 'urn:schemas-upnp-org:service:AVTransport:1#ConfigureSleepTimer',
  SetAVTransportURI: 'urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI',
  Browse: 'urn:schemas-upnp-org:service:ContentDirectory:1#Browse',
  BecomeCoordinatorOfStandaloneGroup: 'urn:schemas-upnp-org:service:AVTransport:1#BecomeCoordinatorOfStandaloneGroup',
  RefreshShareIndex: 'urn:schemas-upnp-org:service:ContentDirectory:1#RefreshShareIndex',
  AddURIToQueue: 'urn:schemas-upnp-org:service:AVTransport:1#AddURIToQueue',
  AddMultipleURIsToQueue: 'urn:schemas-upnp-org:service:AVTransport:1#AddMultipleURIsToQueue',
  ListAvailableServices: 'urn:schemas-upnp-org:service:MusicServices:1#ListAvailableServices'
});

var TEMPLATES = Object.freeze((_Object$freeze = {}, _defineProperty(_Object$freeze, TYPE.SetEQ, '<u:SetEQ xmlns:u="urn:schemas-upnp-org:service:RenderingControl:1"><InstanceID>0</InstanceID><EQType>{eqType}</EQType><DesiredValue>{value}</DesiredValue></u:SetEQ>'), _defineProperty(_Object$freeze, TYPE.Play, '<u:Play xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><Speed>1</Speed></u:Play>'), _defineProperty(_Object$freeze, TYPE.Pause, '<u:Pause xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:Pause>'), _defineProperty(_Object$freeze, TYPE.Stop, '<u:Stop xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:Stop>'), _defineProperty(_Object$freeze, TYPE.Next, '<u:Next xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:Next>'), _defineProperty(_Object$freeze, TYPE.Previous, '<u:Previous xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:Previous>'), _defineProperty(_Object$freeze, TYPE.Mute, '<u:SetMute xmlns:u="urn:schemas-upnp-org:service:RenderingControl:1"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredMute>{mute}</DesiredMute></u:SetMute>'), _defineProperty(_Object$freeze, TYPE.GroupMute, '<u:SetGroupMute xmlns:u="urn:schemas-upnp-org:service:GroupRenderingControl:1"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredMute>{mute}</DesiredMute></u:SetGroupMute>'), _defineProperty(_Object$freeze, TYPE.Volume, '<u:SetVolume xmlns:u="urn:schemas-upnp-org:service:RenderingControl:1"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredVolume>{volume}</DesiredVolume></u:SetVolume>'), _defineProperty(_Object$freeze, TYPE.Seek, '<u:Seek xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><Unit>{unit}</Unit><Target>{value}</Target></u:Seek>'), _defineProperty(_Object$freeze, TYPE.RemoveAllTracksFromQueue, '<u:RemoveAllTracksFromQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:RemoveAllTracksFromQueue>'), _defineProperty(_Object$freeze, TYPE.RemoveTrackFromQueue, '<u:RemoveTrackFromQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><ObjectID>Q:0/{track}</ObjectID></u:RemoveTrackFromQueue>'), _defineProperty(_Object$freeze, TYPE.RemoveTrackRangeFromQueue, '<u:RemoveTrackRangeFromQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><UpdateID>0</UpdateID><StartingIndex>{startIndex}</StartingIndex><NumberOfTracks>{numberOfTracks}</NumberOfTracks></u:RemoveTrackRangeFromQueue>'), _defineProperty(_Object$freeze, TYPE.ReorderTracksInQueue, '<u:ReorderTracksInQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><UpdateID>0</UpdateID><StartingIndex>{startIndex}</StartingIndex><NumberOfTracks>{numberOfTracks}</NumberOfTracks><InsertBefore>{insertBefore}</InsertBefore></u:ReorderTracksInQueue>'), _defineProperty(_Object$freeze, TYPE.SaveQueue, '<u:SaveQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><Title>{title}</Title><ObjectID></ObjectID></u:SaveQueue>'), _defineProperty(_Object$freeze, TYPE.SetPlayMode, '<u:SetPlayMode xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><NewPlayMode>{playMode}</NewPlayMode></u:SetPlayMode>'), _defineProperty(_Object$freeze, TYPE.SetCrossfadeMode, '<u:SetCrossfadeMode xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><CrossfadeMode>{crossfadeMode}</CrossfadeMode></u:SetCrossfadeMode>'), _defineProperty(_Object$freeze, TYPE.GetPositionInfo, '<u:GetPositionInfo xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:GetPositionInfo>'), _defineProperty(_Object$freeze, TYPE.ConfigureSleepTimer, '<u:ConfigureSleepTimer xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><NewSleepTimerDuration>{time}</NewSleepTimerDuration></u:ConfigureSleepTimer>'), _defineProperty(_Object$freeze, TYPE.SetAVTransportURI, '<u:SetAVTransportURI xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><CurrentURI>{uri}</CurrentURI><CurrentURIMetaData>{metadata}</CurrentURIMetaData></u:SetAVTransportURI>'), _defineProperty(_Object$freeze, TYPE.Browse, '<u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1"><ObjectID>{objectId}</ObjectID><BrowseFlag>BrowseDirectChildren</BrowseFlag><Filter /><StartingIndex>{startIndex}</StartingIndex><RequestedCount>{limit}</RequestedCount><SortCriteria /></u:Browse>'), _defineProperty(_Object$freeze, TYPE.BecomeCoordinatorOfStandaloneGroup, '<u:BecomeCoordinatorOfStandaloneGroup xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID></u:BecomeCoordinatorOfStandaloneGroup>'), _defineProperty(_Object$freeze, TYPE.RefreshShareIndex, '<u:RefreshShareIndex xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1"><AlbumArtistDisplayOption></AlbumArtistDisplayOption></u:RefreshShareIndex>'), _defineProperty(_Object$freeze, TYPE.AddURIToQueue, '<u:AddURIToQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><EnqueuedURI>{uri}</EnqueuedURI><EnqueuedURIMetaData>{metadata}</EnqueuedURIMetaData><DesiredFirstTrackNumberEnqueued>{desiredFirstTrackNumberEnqueued}</DesiredFirstTrackNumberEnqueued><EnqueueAsNext>{enqueueAsNext}</EnqueueAsNext></u:AddURIToQueue>'), _defineProperty(_Object$freeze, TYPE.AddMultipleURIsToQueue, '<u:AddMultipleURIsToQueue xmlns:u="urn:schemas-upnp-org:service:AVTransport:1"><InstanceID>0</InstanceID><UpdateID>0</UpdateID><NumberOfURIs>{amount}</NumberOfURIs><EnqueuedURIs>{uris}</EnqueuedURIs><EnqueuedURIsMetaData>{metadatas}</EnqueuedURIsMetaData><ContainerURI>{containerURI}</ContainerURI><ContainerMetaData>{containerMetadata}</ContainerMetaData><DesiredFirstTrackNumberEnqueued>{desiredFirstTrackNumberEnqueued}</DesiredFirstTrackNumberEnqueued><EnqueueAsNext>{enqueueAsNext}</EnqueueAsNext></u:AddMultipleURIsToQueue>'), _defineProperty(_Object$freeze, TYPE.ListAvailableServices, '<u:ListAvailableServices xmlns:u="urn:schemas-upnp-org:service:MusicServices:1"></u:ListAvailableServices>'), _Object$freeze));

function substitute(soapAction, substitutions) {
  var template = TEMPLATES[soapAction];
  var body = template;
  if (substitutions) {
    body = template.replace(/{([a-z]+)}/gi, function (match, group1) {
      return substitutions.hasOwnProperty(group1) ? substitutions[group1] : match;
    });
  }

  return '<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body>' + body + '</s:Body></s:Envelope>';
}
/* jshint +W101 */

function invoke(url, action, values) {
  var soapBody = void 0;
  try {
    soapBody = substitute(action, values);
  } catch (e) {
    return Promise.reject(e);
  }

  logger.trace(url, action, soapBody);

  var body = new Buffer(0);
  if (soapBody) {
    body = new Buffer(soapBody, 'utf8');
  }

  return request({
    uri: url,
    method: 'POST',
    headers: {
      'CONTENT-TYPE': 'text/xml; charset="utf-8"',
      SOAPACTION: '"' + action + '"',
      'CONTENT-LENGTH': body.length
    },
    body: body,
    stream: true
  }).then(function (res) {
    logger.trace('status code: ' + res.statusCode);
    return res;
  });
}

function parse(stream) {
  return new Promise(function (resolve, reject) {
    if (!stream) reject(new ArgumentError('Expected a stream or string as argument, got ' + stream));

    var returnResult = {};

    var sax = flow(stream, { preserveMarkup: flow.NEVER });

    sax.on('tag:s:body', function (node) {
      if (!node) return;

      delete node.$name;
      delete node.$attrs;
      var keys = Object.keys(node);

      if (keys.length === 1) {
        returnResult = node[keys[0]];
        delete returnResult.$attrs;
      }
    });

    sax.on('end', function () {
      resolve(returnResult);
    });

    sax.on('error', function (error) {
      reject(error);
    });
  });
}

module.exports = {
  invoke: invoke,
  parse: parse,
  TYPE: TYPE,
  TEMPLATES: TEMPLATES
};
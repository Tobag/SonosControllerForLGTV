'use strict';

var logger = require('../../helpers/logger');

function isRadio(uri) {
  return uri.startsWith('x-sonosapi-stream:') || uri.startsWith('x-sonosapi-radio:') || uri.startsWith('pndrradio:') || uri.startsWith('x-sonosapi-hls:') || uri.startsWith('x-sonosprog-http:');
}

function replaceWithFavorite(favoriteName) {
  var _this = this;

  logger.debug('replacing with favorite ' + favoriteName);
  return this.system.getFavorites().then(function (favorites) {
    logger.debug('found favorites', favorites.map(function (x) {
      return x.title;
    }));
    return favorites.find(function (fav) {
      return fav.title.toLowerCase() === favoriteName.toLowerCase() || fav.uri.toLowerCase() === favoriteName.toLowerCase();
    });
  }).then(function (favorite) {
    if (!favorite) {
      throw new Error('Favorite not found');
    }

    if (isRadio(favorite.uri)) {
      logger.debug('favorite is radiostation');
      return favorite;
    }

    logger.debug('clearing queue');
    return _this.clearQueue().then(function () {
      return logger.debug('Adding ' + favorite.uri + ' to queue with metadata ' + favorite.metadata);
    }).then(function () {
      return _this.addURIToQueue(favorite.uri, favorite.metadata);
    }).then(function () {
      return logger.debug('triggering queue mode');
    }).then(function () {
      return { uri: 'x-rincon-queue:' + _this.uuid + '#0' };
    });
  }).then(function (favorite) {
    logger.debug('setting AVTransport to ' + favorite.uri + ' with metadata ' + favorite.metadata);
    if (_this.avTransportUri === favorite.uri) {
      logger.debug('already has ' + favorite.uri + ' as AVTransport, skipping');
      return;
    }

    return _this.setAVTransport(favorite.uri, favorite.metadata);
  });
}

module.exports = replaceWithFavorite;
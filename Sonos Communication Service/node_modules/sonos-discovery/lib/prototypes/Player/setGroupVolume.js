'use strict';

function setGroupVolume(desiredVolume) {
  var _this = this;

  var currentGroupVolume = this.groupState.volume;
  var deltaVolume = void 0;

  // If prefixed with + or -
  if (/^[+-]/.test(desiredVolume)) {
    deltaVolume = parseInt(desiredVolume);
    desiredVolume = currentGroupVolume + parseInt(desiredVolume);
  } else {
    desiredVolume = parseInt(desiredVolume);
    deltaVolume = desiredVolume - currentGroupVolume;
  }

  var zone = this.system.zones.find(function (zone) {
    return zone.uuid === _this.uuid;
  });

  var promises = zone.members.map(function (player) {
    var targetVolume = void 0;
    if (desiredVolume < 1) {
      targetVolume = 0;
    } else if (deltaVolume > 0) {
      targetVolume = player.state.volume + deltaVolume;
    } else {
      var factor = player.state.volume / currentGroupVolume;
      targetVolume = Math.ceil(factor * desiredVolume);
    }

    // Update internal state instantly to recalculate correctly
    player._setVolume(targetVolume);
    return player.setVolume(targetVolume);
  });

  this.groupState.volume = desiredVolume;

  return Promise.all(promises);
}

module.exports = setGroupVolume;